make[1]: Entering directory `/afs/cs.cmu.edu/project/ics/im/labs/shlab/src'
# 进入实验源码目录，准备运行测试
================================================================================================================
./sdriver.pl -t trace01.txt -s ./tsh -a "-p"
# 使用 sdriver.pl 脚本，加载 trace01.txt 测试用例，运行 shell
#
# trace01.txt - Properly terminate on EOF.
# 测试点：遇到文件结尾（EOF）时 shell 能否正确退出
================================================================================================================
./sdriver.pl -t trace02.txt -s ./tsh -a "-p"
# 加载 trace02.txt 测试用例
#
# trace02.txt - Process builtin quit command.
# 测试点：shell 能否正确处理内建 quit 命令
================================================================================================================
./sdriver.pl -t trace03.txt -s ./tsh -a "-p"
# 加载 trace03.txt 测试用例
#
# trace03.txt - Run a foreground job.
# 测试点：运行一个前台作业
================================================================================================================
tsh> quit
# 用户输入 quit，shell 应该退出
================================================================================================================================================================================================================================-------
./sdriver.pl -t trace04.txt -s ./tsh -a "-p"
# 加载 trace04.txt 测试用例
#
# trace04.txt - Run a background job.
# 测试点：运行一个后台作业
================================================================================================================
tsh> ./myspin 1 &
# 用户输入后台作业命令 ./myspin 1 &
[1] (26252) ./myspin 1 &
# shell 输出：作业号[1]，进程号(26252)，命令 ./myspin 1 &
================================================================================================================
./sdriver.pl -t trace05.txt -s ./tsh -a "-p"
# 加载 trace05.txt 测试用例
#
# trace05.txt - Process jobs builtin command.
# 测试点：jobs 内建命令，显示所有作业
================================================================================================================
tsh> ./myspin 2 &
# 用户输入后台作业 ./myspin 2 &
[1] (26256) ./myspin 2 &
# shell 输出：作业号[1]，进程号(26256)，命令 ./myspin 2 &
tsh> ./myspin 3 &
# 用户输入后台作业 ./myspin 3 &
[2] (26258) ./myspin 3 &
# shell 输出：作业号[2]，进程号(26258)，命令 ./myspin 3 &
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26256) Running ./myspin 2 &
[2] (26258) Running ./myspin 3 &
# shell 输出：显示两个正在运行的后台作业
================================================================================================================
./sdriver.pl -t trace06.txt -s ./tsh -a "-p"
# 加载 trace06.txt 测试用例
#
# trace06.txt - Forward SIGINT to foreground job.
# 测试点：将 SIGINT 信号（Ctrl+C）转发给前台作业
================================================================================================================
tsh> ./myspin 4
# 用户运行前台作业 ./myspin 4
Job [1] (26263) terminated by signal 2
# shell 输出：作业[1]（进程26263）被信号2（SIGINT）终止
================================================================================================================
./sdriver.pl -t trace07.txt -s ./tsh -a "-p"
# 加载 trace07.txt 测试用例
#
# trace07.txt - Forward SIGINT only to foreground job.
# 测试点：SIGINT 只发给前台作业，后台作业不受影响
================================================================================================================
tsh> ./myspin 4 &
# 用户运行后台作业 ./myspin 4 &
[1] (26267) ./myspin 4 &
# shell 输出：作业号[1]，进程号(26267)，命令 ./myspin 4 &
tsh> ./myspin 5
# 用户运行前台作业 ./myspin 5
Job [2] (26269) terminated by signal 2
# shell 输出：作业[2]（进程26269）被信号2（SIGINT）终止
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26267) Running ./myspin 4 &
# shell 输出：后台作业仍在运行
================================================================================================================
./sdriver.pl -t trace08.txt -s ./tsh -a "-p"
# 加载 trace08.txt 测试用例
#
# trace08.txt - Forward SIGTSTP only to foreground job.
# 测试点：SIGTSTP（Ctrl+Z）只发给前台作业
================================================================================================================
tsh> ./myspin 4 &
# 用户运行后台作业 ./myspin 4 &
[1] (26274) ./myspin 4 &
# shell 输出：作业号[1]，进程号(26274)，命令 ./myspin 4 &
tsh> ./myspin 5
# 用户运行前台作业 ./myspin 5
Job [2] (26276) stopped by signal 20
# shell 输出：作业[2]（进程26276）被信号20（SIGTSTP）停止
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26274) Running ./myspin 4 &
[2] (26276) Stopped ./myspin 5 
# shell 输出：一个后台作业运行中，一个作业已停止
================================================================================================================
./sdriver.pl -t trace09.txt -s ./tsh -a "-p"
# 加载 trace09.txt 测试用例
#
# trace09.txt - Process bg builtin command
# 测试点：bg 命令恢复后台停止的作业
================================================================================================================
tsh> ./myspin 4 &
# 用户运行后台作业 ./myspin 4 &
[1] (26281) ./myspin 4 &
# shell 输出：作业号[1]，进程号(26281)，命令 ./myspin 4 &
tsh> ./myspin 5
# 用户运行前台作业 ./myspin 5
Job [2] (26283) stopped by signal 20
# shell 输出：作业[2]（进程26283）被 SIGTSTP 停止
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26281) Running ./myspin 4 &
[2] (26283) Stopped ./myspin 5 
# shell 输出：一个后台作业运行中，一个作业已停止
tsh> bg %2
# 用户输入 bg %2，恢复作业2到后台运行
[2] (26283) ./myspin 5 
# shell 输出：作业2恢复运行
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26281) Running ./myspin 4 &
[2] (26283) Running ./myspin 5 
# shell 输出：两个后台作业都在运行
================================================================================================================
./sdriver.pl -t trace10.txt -s ./tsh -a "-p"
# 加载 trace10.txt 测试用例
#
# trace10.txt - Process fg builtin command. 
# 测试点：fg 命令将后台作业调到前台
================================================================================================================
tsh> ./myspin 4 &
# 用户运行后台作业 ./myspin 4 &
[1] (26290) ./myspin 4 &
# shell 输出：作业号[1]，进程号(26290)，命令 ./myspin 4 &
tsh> fg %1
# 用户输入 fg %1，将作业1调到前台
Job [1] (26290) stopped by signal 20
# shell 输出：作业1被 SIGTSTP 停止
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26290) Stopped ./myspin 4 &
# shell 输出：作业1已停止
tsh> fg %1
# 用户再次输入 fg %1，继续前台作业
tsh> jobs
# 用户输入 jobs，查看当前作业
================================================================================================================
./sdriver.pl -t trace11.txt -s ./tsh -a "-p"
# 加载 trace11.txt 测试用例
#
# trace11.txt - Forward SIGINT to every process in foreground process group
# 测试点：SIGINT 信号应转发给前台进程组的所有进程
================================================================================================================
tsh> ./mysplit 4
# 用户运行 ./mysplit 4，创建一个子进程
Job [1] (26298) terminated by signal 2
# shell 输出：作业1被 SIGINT 终止
tsh> /bin/ps a
# 用户输入 ps 命令，查看进程状态
  PID TTY      STAT   TIME COMMAND
25181 pts/3    S      0:00 -usr/local/bin/tcsh -i
26239 pts/3    S      0:00 make tshrefout
26240 pts/3    S      0:00 /bin/sh -c make tests > tshref.out 2>&1
26241 pts/3    S      0:00 make tests
26295 pts/3    S      0:00 perl ./sdriver.pl -t trace11.txt -s ./tsh -a -p
26296 pts/3    S      0:00 ./tsh -p
26301 pts/3    R      0:00 /bin/ps a
# shell 输出：当前所有进程信息
================================================================================================================
./sdriver.pl -t trace12.txt -s ./tsh -a "-p"
# 加载 trace12.txt 测试用例
#
# trace12.txt - Forward SIGTSTP to every process in foreground process group
# 测试点：SIGTSTP 信号应转发给前台进程组所有进程
================================================================================================================
tsh> ./mysplit 4
# 用户运行 ./mysplit 4
Job [1] (26305) stopped by signal 20
# shell 输出：作业1被 SIGTSTP 停止
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26305) Stopped ./mysplit 4 
# shell 输出：mysplit 4 已停止
tsh> /bin/ps a
# 用户输入 ps 命令，查看进程状态
  PID TTY      STAT   TIME COMMAND
25181 pts/3    S      0:00 -usr/local/bin/tcsh -i
26239 pts/3    S      0:00 make tshrefout
26240 pts/3    S      0:00 /bin/sh -c make tests > tshref.out 2>&1
26241 pts/3    S      0:00 make tests
26302 pts/3    S      0:00 perl ./sdriver.pl -t trace12.txt -s ./tsh -a -p
26303 pts/3    S      0:00 ./tsh -p
26305 pts/3    T      0:00 ./mysplit 4
26306 pts/3    T      0:00 ./mysplit 4
26309 pts/3    R      0:00 /bin/ps a
# shell 输出：当前所有进程信息
================================================================================================================
./sdriver.pl -t trace13.txt -s ./tsh -a "-p"
# 加载 trace13.txt 测试用例
#
# trace13.txt - Restart every stopped process in process group
# 测试点：恢复进程组中所有已停止的进程
================================================================================================================
tsh> ./mysplit 4
# 用户运行 ./mysplit 4
Job [1] (26313) stopped by signal 20
# shell 输出：作业1被 SIGTSTP 停止
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26313) Stopped ./mysplit 4 
# shell 输出：mysplit 4 已停止
tsh> /bin/ps a
# 用户输入 ps 命令，查看进程状态
  PID TTY      STAT   TIME COMMAND
25181 pts/3    S      0:00 -usr/local/bin/tcsh -i
26239 pts/3    S      0:00 make tshrefout
26240 pts/3    S      0:00 /bin/sh -c make tests > tshref.out 2>&1
26241 pts/3    S      0:00 make tests
26310 pts/3    S      0:00 perl ./sdriver.pl -t trace13.txt -s ./tsh -a -p
26311 pts/3    S      0:00 ./tsh -p
26313 pts/3    T      0:00 ./mysplit 4
26314 pts/3    T      0:00 ./mysplit 4
26317 pts/3    R      0:00 /bin/ps a
# shell 输出：当前所有进程信息
tsh> fg %1
# 用户输入 fg %1，将作业1调到前台
tsh> /bin/ps a
# 用户输入 ps 命令，查看进程状态
  PID TTY      STAT   TIME COMMAND
25181 pts/3    S      0:00 -usr/local/bin/tcsh -i
26239 pts/3    S      0:00 make tshrefout
26240 pts/3    S      0:00 /bin/sh -c make tests > tshref.out 2>&1
26241 pts/3    S      0:00 make tests
26310 pts/3    S      0:00 perl ./sdriver.pl -t trace13.txt -s ./tsh -a -p
26311 pts/3    S      0:00 ./tsh -p
26320 pts/3    R      0:00 /bin/ps a
# shell 输出：当前所有进程信息
================================================================================================================
./sdriver.pl -t trace14.txt -s ./tsh -a "-p"
# 加载 trace14.txt 测试用例
#
# trace14.txt - Simple error handling
# 测试点：简单的错误处理
================================================================================================================
tsh> ./bogus
# 用户输入不存在的命令 ./bogus
./bogus: Command not found
# shell 输出：命令未找到
tsh> ./myspin 4 &
# 用户运行后台作业 ./myspin 4 &
[1] (26326) ./myspin 4 &
# shell 输出：作业号[1]，进程号(26326)，命令 ./myspin 4 &
tsh> fg
# 用户输入 fg，未指定参数
fg command requires PID or %jobid argument
# shell 输出：fg 命令需要参数
tsh> bg
# 用户输入 bg，未指定参数
bg command requires PID or %jobid argument
# shell 输出：bg 命令需要参数
tsh> fg a
# 用户输入 fg a，参数非法
fg: argument must be a PID or %jobid
# shell 输出：参数必须是 PID 或 %jobid
tsh> bg a
# 用户输入 bg a，参数非法
bg: argument must be a PID or %jobid
# shell 输出：参数必须是 PID 或 %jobid
tsh> fg 9999999
# 用户输入 fg 9999999，PID 不存在
(9999999): No such process
# shell 输出：没有该进程
tsh> bg 9999999
# 用户输入 bg 9999999，PID 不存在
(9999999): No such process
# shell 输出：没有该进程
tsh> fg %2
# 用户输入 fg %2，作业号不存在
%2: No such job
# shell 输出：没有该作业
tsh> fg %1
# 用户输入 fg %1，将作业1调到前台
Job [1] (26326) stopped by signal 20
# shell 输出：作业1被 SIGTSTP 停止
tsh> bg %2
# 用户输入 bg %2，作业号不存在
%2: No such job
# shell 输出：没有该作业
tsh> bg %1
# 用户输入 bg %1，恢复作业1到后台
[1] (26326) ./myspin 4 &
# shell 输出：作业1恢复运行
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26326) Running ./myspin 4 &
# shell 输出：作业1正在运行
================================================================================================================
./sdriver.pl -t trace15.txt -s ./tsh -a "-p"
# 加载 trace15.txt 测试用例
#
# trace15.txt - Putting it all together
# 测试点：综合测试所有功能
================================================================================================================
tsh> ./bogus
# 用户输入不存在的命令 ./bogus
./bogus: Command not found
# shell 输出：命令未找到
tsh> ./myspin 10
# 用户运行前台作业 ./myspin 10
Job [1] (26343) terminated by signal 2
# shell 输出：作业1被 SIGINT 终止
tsh> ./myspin 3 &
# 用户运行后台作业 ./myspin 3 &
[1] (26345) ./myspin 3 &
# shell 输出：作业号[1]，进程号(26345)，命令 ./myspin 3 &
tsh> ./myspin 4 &
# 用户运行后台作业 ./myspin 4 &
[2] (26347) ./myspin 4 &
# shell 输出：作业号[2]，进程号(26347)，命令 ./myspin 4 &
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26345) Running ./myspin 3 &
[2] (26347) Running ./myspin 4 &
# shell 输出：两个后台作业都在运行
tsh> fg %1
# 用户输入 fg %1，将作业1调到前台
Job [1] (26345) stopped by signal 20
# shell 输出：作业1被 SIGTSTP 停止
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26345) Stopped ./myspin 3 &
[2] (26347) Running ./myspin 4 &
# shell 输出：一个作业停止，一个作业运行
tsh> bg %3
# 用户输入 bg %3，作业号不存在
%3: No such job
# shell 输出：没有该作业
tsh> bg %1
# 用户输入 bg %1，恢复作业1到后台
[1] (26345) ./myspin 3 &
# shell 输出：作业1恢复运行
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26345) Running ./myspin 3 &
[2] (26347) Running ./myspin 4 &
# shell 输出：两个后台作业都在运行
tsh> fg %1
# 用户输入 fg %1，将作业1调到前台
tsh> quit
# 用户输入 quit，shell 退出
================================================================================================================
./sdriver.pl -t trace16.txt -s ./tsh -a "-p"
# 加载 trace16.txt 测试用例
#
# trace16.txt - Tests whether the shell can handle SIGTSTP and SIGINT
#     signals that come from other processes instead of the terminal.
# 测试点：shell 能否处理来自其他进程的 SIGTSTP 和 SIGINT 信号
================================================================================================================
tsh> ./mystop 2
# 用户运行 ./mystop 2
Job [1] (26359) stopped by signal 20
# shell 输出：作业1被 SIGTSTP 停止
tsh> jobs
# 用户输入 jobs，查看当前作业
[1] (26359) Stopped ./mystop 2
# shell 输出：mystop 2 已停止
tsh> ./myint 2
# 用户运行 ./myint 2
Job [2] (26362) terminated by signal 2
# shell 输出：作业2被 SIGINT 终止
================================================================================================================
make[1]: Leaving directory `/afs/cs.cmu.edu/project/ics/im/labs/shlab/src'
# 离开实验源码目录，测试结束
================================================================================================================
